// This file is auto-generated by @hey-api/openapi-ts

export const $AlternateEntryFile = {
    type: "object",
    properties: {
        format: {
            type: "string",
            readOnly: true,
        },
        url: {
            type: "string",
            readOnly: true,
        },
    },
    required: ["format", "url"],
} as const;

export const $BlogEntry = {
    type: "object",
    properties: {
        id: {
            type: "integer",
            readOnly: true,
        },
        user: {
            type: "integer",
        },
        date: {
            type: "string",
            format: "date-time",
            readOnly: true,
            title: "Aika",
        },
        title: {
            type: "string",
            title: "Otsikko",
            description: "Lyhyt otsikko entrylle.",
            maxLength: 128,
        },
        text: {
            type: "string",
            title: "Teksti",
        },
        public: {
            type: "boolean",
            title: "Julkinen",
            description:
                "Mikäli entry on julkinen, tulee se näkyviin sekä tapahtuman sivuille että RSS-syötteeseen.",
        },
        event: {
            type: "integer",
            title: "Tapahtuma",
        },
        created_by: {
            type: "string",
            readOnly: true,
        },
    },
    required: ["created_by", "date", "event", "id", "text", "title"],
} as const;

export const $BlogEntryRequest = {
    type: "object",
    properties: {
        user: {
            type: "integer",
        },
        title: {
            type: "string",
            minLength: 1,
            title: "Otsikko",
            description: "Lyhyt otsikko entrylle.",
            maxLength: 128,
        },
        text: {
            type: "string",
            minLength: 1,
            title: "Teksti",
        },
        public: {
            type: "boolean",
            title: "Julkinen",
            description:
                "Mikäli entry on julkinen, tulee se näkyviin sekä tapahtuman sivuille että RSS-syötteeseen.",
        },
        event: {
            type: "integer",
            title: "Tapahtuma",
        },
    },
    required: ["event", "text", "title"],
} as const;

export const $CompoEntry = {
    type: "object",
    properties: {
        id: {
            type: "integer",
            readOnly: true,
        },
        compo: {
            type: "integer",
            title: "Kompo",
            description: "Kompo johon osallistutaan",
        },
        name: {
            type: "string",
            title: "Nimi",
            description: "Nimi tuotokselle",
            maxLength: 64,
        },
        description: {
            type: "string",
            title: "Kuvaus",
            description: "Voi sisältää mm. tietoja käytetyistä tekniikoista, muuta sanottavaa.",
        },
        creator: {
            type: "string",
            title: "Tekijä",
            description: "Tuotoksen tekijän tai tekijäryhmän nimi",
            maxLength: 64,
        },
        platform: {
            type: "string",
            nullable: true,
            title: "Alusta",
            description:
                "Alusta jolla entry toimii. Voit jättää tyhjäksi jos entry ei sisällä ajettavaa koodia.",
            maxLength: 128,
        },
        entry_file_url: {
            type: "string",
            nullable: true,
            readOnly: true,
        },
        source_file_url: {
            type: "string",
            nullable: true,
            readOnly: true,
        },
        image_file_original_url: {
            type: "string",
            nullable: true,
            readOnly: true,
        },
        image_file_thumbnail_url: {
            type: "string",
            nullable: true,
            readOnly: true,
        },
        image_file_medium_url: {
            type: "string",
            nullable: true,
            readOnly: true,
        },
        youtube_url: {
            type: "string",
            nullable: true,
            readOnly: true,
        },
        disqualified: {
            type: "boolean",
            nullable: true,
            readOnly: true,
        },
        disqualified_reason: {
            type: "string",
            nullable: true,
            readOnly: true,
        },
        score: {
            type: "number",
            format: "double",
            nullable: true,
            readOnly: true,
        },
        rank: {
            type: "integer",
            nullable: true,
            readOnly: true,
        },
        alternate_files: {
            type: "array",
            items: {
                $ref: "#/components/schemas/AlternateEntryFile",
            },
            readOnly: true,
        },
    },
    required: [
        "alternate_files",
        "compo",
        "creator",
        "description",
        "disqualified",
        "disqualified_reason",
        "entry_file_url",
        "id",
        "image_file_medium_url",
        "image_file_original_url",
        "image_file_thumbnail_url",
        "name",
        "rank",
        "score",
        "source_file_url",
        "youtube_url",
    ],
} as const;

export const $CompoEntryRequest = {
    type: "object",
    properties: {
        compo: {
            type: "integer",
            title: "Kompo",
            description: "Kompo johon osallistutaan",
        },
        name: {
            type: "string",
            minLength: 1,
            title: "Nimi",
            description: "Nimi tuotokselle",
            maxLength: 64,
        },
        description: {
            type: "string",
            minLength: 1,
            title: "Kuvaus",
            description: "Voi sisältää mm. tietoja käytetyistä tekniikoista, muuta sanottavaa.",
        },
        creator: {
            type: "string",
            minLength: 1,
            title: "Tekijä",
            description: "Tuotoksen tekijän tai tekijäryhmän nimi",
            maxLength: 64,
        },
        platform: {
            type: "string",
            nullable: true,
            title: "Alusta",
            description:
                "Alusta jolla entry toimii. Voit jättää tyhjäksi jos entry ei sisällä ajettavaa koodia.",
            maxLength: 128,
        },
    },
    required: ["compo", "creator", "description", "name"],
} as const;

export const $Event = {
    type: "object",
    properties: {
        id: {
            type: "integer",
            readOnly: true,
        },
        name: {
            type: "string",
            title: "Nimi",
            description: "Tapahtuman nimi",
            maxLength: 64,
        },
        tag: {
            type: "string",
            nullable: true,
            title: "Lyhyt esitys",
            description: "Lyhyt nimi, eg. vuosi",
            maxLength: 8,
        },
        date: {
            type: "string",
            format: "date",
            title: "Päivämäärä",
            description: "Tapahtuman päivämäärä (alku)",
        },
        archived: {
            type: "boolean",
            title: "Arkistoitu",
            description: "Saa näyttää arkistossa",
        },
        mainurl: {
            type: "string",
            format: "uri",
            title: "Tapahtuman pääsivu",
            description: "URL Tapahtuman pääsivustolle",
            maxLength: 200,
        },
    },
    required: ["date", "id", "name"],
} as const;

export const $EventRequest = {
    type: "object",
    properties: {
        name: {
            type: "string",
            minLength: 1,
            title: "Nimi",
            description: "Tapahtuman nimi",
            maxLength: 64,
        },
        tag: {
            type: "string",
            nullable: true,
            minLength: 1,
            title: "Lyhyt esitys",
            description: "Lyhyt nimi, eg. vuosi",
            maxLength: 8,
        },
        date: {
            type: "string",
            format: "date",
            title: "Päivämäärä",
            description: "Tapahtuman päivämäärä (alku)",
        },
        archived: {
            type: "boolean",
            title: "Arkistoitu",
            description: "Saa näyttää arkistossa",
        },
        mainurl: {
            type: "string",
            format: "uri",
            title: "Tapahtuman pääsivu",
            description: "URL Tapahtuman pääsivustolle",
            maxLength: 200,
        },
    },
    required: ["date", "name"],
} as const;

export const $Group = {
    type: "object",
    properties: {
        name: {
            type: "string",
            title: "Nimi",
            maxLength: 150,
        },
    },
    required: ["name"],
} as const;

export const $GroupRequest = {
    type: "object",
    properties: {
        name: {
            type: "string",
            minLength: 1,
            title: "Nimi",
            maxLength: 150,
        },
    },
    required: ["name"],
} as const;

export const $PaginatedBlogEntryList = {
    type: "object",
    required: ["count", "results"],
    properties: {
        count: {
            type: "integer",
            example: 123,
        },
        next: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=400&limit=100",
        },
        previous: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=200&limit=100",
        },
        results: {
            type: "array",
            items: {
                $ref: "#/components/schemas/BlogEntry",
            },
        },
    },
} as const;

export const $PaginatedCompoEntryList = {
    type: "object",
    required: ["count", "results"],
    properties: {
        count: {
            type: "integer",
            example: 123,
        },
        next: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=400&limit=100",
        },
        previous: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=200&limit=100",
        },
        results: {
            type: "array",
            items: {
                $ref: "#/components/schemas/CompoEntry",
            },
        },
    },
} as const;

export const $PaginatedEventList = {
    type: "object",
    required: ["count", "results"],
    properties: {
        count: {
            type: "integer",
            example: 123,
        },
        next: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=400&limit=100",
        },
        previous: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=200&limit=100",
        },
        results: {
            type: "array",
            items: {
                $ref: "#/components/schemas/Event",
            },
        },
    },
} as const;

export const $PaginatedUserList = {
    type: "object",
    required: ["count", "results"],
    properties: {
        count: {
            type: "integer",
            example: 123,
        },
        next: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=400&limit=100",
        },
        previous: {
            type: "string",
            nullable: true,
            format: "uri",
            example: "http://api.example.org/accounts/?offset=200&limit=100",
        },
        results: {
            type: "array",
            items: {
                $ref: "#/components/schemas/User",
            },
        },
    },
} as const;

export const $PatchedBlogEntryRequest = {
    type: "object",
    properties: {
        user: {
            type: "integer",
        },
        title: {
            type: "string",
            minLength: 1,
            title: "Otsikko",
            description: "Lyhyt otsikko entrylle.",
            maxLength: 128,
        },
        text: {
            type: "string",
            minLength: 1,
            title: "Teksti",
        },
        public: {
            type: "boolean",
            title: "Julkinen",
            description:
                "Mikäli entry on julkinen, tulee se näkyviin sekä tapahtuman sivuille että RSS-syötteeseen.",
        },
        event: {
            type: "integer",
            title: "Tapahtuma",
        },
    },
} as const;

export const $PatchedCompoEntryRequest = {
    type: "object",
    properties: {
        compo: {
            type: "integer",
            title: "Kompo",
            description: "Kompo johon osallistutaan",
        },
        name: {
            type: "string",
            minLength: 1,
            title: "Nimi",
            description: "Nimi tuotokselle",
            maxLength: 64,
        },
        description: {
            type: "string",
            minLength: 1,
            title: "Kuvaus",
            description: "Voi sisältää mm. tietoja käytetyistä tekniikoista, muuta sanottavaa.",
        },
        creator: {
            type: "string",
            minLength: 1,
            title: "Tekijä",
            description: "Tuotoksen tekijän tai tekijäryhmän nimi",
            maxLength: 64,
        },
        platform: {
            type: "string",
            nullable: true,
            title: "Alusta",
            description:
                "Alusta jolla entry toimii. Voit jättää tyhjäksi jos entry ei sisällä ajettavaa koodia.",
            maxLength: 128,
        },
    },
} as const;

export const $PatchedEventRequest = {
    type: "object",
    properties: {
        name: {
            type: "string",
            minLength: 1,
            title: "Nimi",
            description: "Tapahtuman nimi",
            maxLength: 64,
        },
        tag: {
            type: "string",
            nullable: true,
            minLength: 1,
            title: "Lyhyt esitys",
            description: "Lyhyt nimi, eg. vuosi",
            maxLength: 8,
        },
        date: {
            type: "string",
            format: "date",
            title: "Päivämäärä",
            description: "Tapahtuman päivämäärä (alku)",
        },
        archived: {
            type: "boolean",
            title: "Arkistoitu",
            description: "Saa näyttää arkistossa",
        },
        mainurl: {
            type: "string",
            format: "uri",
            title: "Tapahtuman pääsivu",
            description: "URL Tapahtuman pääsivustolle",
            maxLength: 200,
        },
    },
} as const;

export const $PatchedUserRequest = {
    type: "object",
    properties: {
        username: {
            type: "string",
            minLength: 1,
            title: "Käyttäjätunnus",
            description:
                "Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.",
            pattern: "^[w.@+-]+$",
            maxLength: 150,
        },
        first_name: {
            type: "string",
            title: "Etunimi",
            maxLength: 150,
        },
        last_name: {
            type: "string",
            title: "Sukunimi",
            maxLength: 150,
        },
        email: {
            type: "string",
            format: "email",
            title: "Sähköpostiosoite",
            maxLength: 254,
        },
        is_active: {
            type: "boolean",
            title: "Voimassa",
            description:
                "Määrää, voiko käyttäjä kirjautua sisään. Tällä voi estää käyttäjätilin käytön poistamatta sitä.",
        },
    },
} as const;

export const $Permission = {
    type: "object",
    properties: {
        name: {
            type: "string",
            title: "Nimi",
            maxLength: 255,
        },
        codename: {
            type: "string",
            title: "Tunniste",
            maxLength: 100,
        },
    },
    required: ["codename", "name"],
} as const;

export const $PermissionRequest = {
    type: "object",
    properties: {
        name: {
            type: "string",
            minLength: 1,
            title: "Nimi",
            maxLength: 255,
        },
        codename: {
            type: "string",
            minLength: 1,
            title: "Tunniste",
            maxLength: 100,
        },
    },
    required: ["codename", "name"],
} as const;

export const $SocialAuthURL = {
    type: "object",
    properties: {
        method: {
            type: "string",
        },
        url: {
            type: "string",
        },
        name: {
            type: "string",
        },
    },
    required: ["method", "name", "url"],
} as const;

export const $User = {
    type: "object",
    properties: {
        id: {
            type: "integer",
            readOnly: true,
        },
        username: {
            type: "string",
            title: "Käyttäjätunnus",
            description:
                "Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.",
            pattern: "^[w.@+-]+$",
            maxLength: 150,
        },
        first_name: {
            type: "string",
            title: "Etunimi",
            maxLength: 150,
        },
        last_name: {
            type: "string",
            title: "Sukunimi",
            maxLength: 150,
        },
        email: {
            type: "string",
            format: "email",
            title: "Sähköpostiosoite",
            maxLength: 254,
        },
        user_permissions: {
            type: "array",
            items: {
                $ref: "#/components/schemas/Permission",
            },
            readOnly: true,
        },
        is_superuser: {
            type: "boolean",
            readOnly: true,
            title: "Pääkäyttäjä",
            description:
                "Antaa käyttäjälle kaikki oikeudet ilman, että niitä täytyy erikseen luetella.",
        },
        date_joined: {
            type: "string",
            format: "date-time",
            readOnly: true,
            title: "Liittynyt",
        },
        groups: {
            type: "array",
            items: {
                $ref: "#/components/schemas/Group",
            },
            readOnly: true,
        },
        is_active: {
            type: "boolean",
            title: "Voimassa",
            description:
                "Määrää, voiko käyttäjä kirjautua sisään. Tällä voi estää käyttäjätilin käytön poistamatta sitä.",
        },
    },
    required: ["date_joined", "groups", "id", "is_superuser", "user_permissions", "username"],
} as const;

export const $UserInfo = {
    type: "object",
    properties: {
        id: {
            type: "integer",
            readOnly: true,
        },
        username: {
            type: "string",
            title: "Käyttäjätunnus",
            description:
                "Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.",
            pattern: "^[w.@+-]+$",
            maxLength: 150,
        },
        first_name: {
            type: "string",
            title: "Etunimi",
            maxLength: 150,
        },
        last_name: {
            type: "string",
            title: "Sukunimi",
            maxLength: 150,
        },
        email: {
            type: "string",
            format: "email",
            title: "Sähköpostiosoite",
            maxLength: 254,
        },
        user_permissions: {
            type: "array",
            items: {
                $ref: "#/components/schemas/Permission",
            },
            readOnly: true,
        },
        is_superuser: {
            type: "boolean",
            readOnly: true,
            title: "Pääkäyttäjä",
            description:
                "Antaa käyttäjälle kaikki oikeudet ilman, että niitä täytyy erikseen luetella.",
        },
        date_joined: {
            type: "string",
            format: "date-time",
            readOnly: true,
            title: "Liittynyt",
        },
    },
    required: ["date_joined", "id", "is_superuser", "user_permissions", "username"],
} as const;

export const $UserLoginRequest = {
    type: "object",
    properties: {
        username: {
            type: "string",
            minLength: 1,
            maxLength: 255,
        },
        password: {
            type: "string",
            minLength: 1,
            maxLength: 255,
        },
    },
    required: ["password", "username"],
} as const;

export const $UserRequest = {
    type: "object",
    properties: {
        username: {
            type: "string",
            minLength: 1,
            title: "Käyttäjätunnus",
            description:
                "Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.",
            pattern: "^[w.@+-]+$",
            maxLength: 150,
        },
        first_name: {
            type: "string",
            title: "Etunimi",
            maxLength: 150,
        },
        last_name: {
            type: "string",
            title: "Sukunimi",
            maxLength: 150,
        },
        email: {
            type: "string",
            format: "email",
            title: "Sähköpostiosoite",
            maxLength: 254,
        },
        is_active: {
            type: "boolean",
            title: "Voimassa",
            description:
                "Määrää, voiko käyttäjä kirjautua sisään. Tällä voi estää käyttäjätilin käytön poistamatta sitä.",
        },
    },
    required: ["username"],
} as const;
