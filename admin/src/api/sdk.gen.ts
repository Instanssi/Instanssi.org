// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, GetSocialAuthUrlsData, GetSocialAuthUrlsResponses, BlogEntriesListData, BlogEntriesListResponses, BlogEntriesCreateData, BlogEntriesCreateResponses, BlogEntriesDestroyData, BlogEntriesDestroyResponses, BlogEntriesRetrieveData, BlogEntriesRetrieveResponses, BlogEntriesPartialUpdateData, BlogEntriesPartialUpdateResponses, BlogEntriesUpdateData, BlogEntriesUpdateResponses, EventsListData, EventsListResponses, EventsCreateData, EventsCreateResponses, EventsDestroyData, EventsDestroyResponses, EventsRetrieveData, EventsRetrieveResponses, EventsPartialUpdateData, EventsPartialUpdateResponses, EventsUpdateData, EventsUpdateResponses, UserCompoEntriesListData, UserCompoEntriesListResponses, UserCompoEntriesCreateData, UserCompoEntriesCreateResponses, UserCompoEntriesDestroyData, UserCompoEntriesDestroyResponses, UserCompoEntriesRetrieveData, UserCompoEntriesRetrieveResponses, UserCompoEntriesPartialUpdateData, UserCompoEntriesPartialUpdateResponses, UserCompoEntriesUpdateData, UserCompoEntriesUpdateResponses, UserInfoData, UserInfoResponses, UsersListData, UsersListResponses, UsersCreateData, UsersCreateResponses, UsersDestroyData, UsersDestroyResponses, UsersRetrieveData, UsersRetrieveResponses, UsersPartialUpdateData, UsersPartialUpdateResponses, UsersUpdateData, UsersUpdateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/auth/login/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/auth/logout/',
        ...options
    });
};

/**
 * Returns a list of URLs that can be used to begin a social authentication process.
 */
export const getSocialAuthUrls = <ThrowOnError extends boolean = false>(options?: Options<GetSocialAuthUrlsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSocialAuthUrlsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/v2/auth/social_urls/',
        ...options
    });
};

export const blogEntriesList = <ThrowOnError extends boolean = false>(options?: Options<BlogEntriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogEntriesListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/blog_entries/',
        ...options
    });
};

export const blogEntriesCreate = <ThrowOnError extends boolean = false>(options: Options<BlogEntriesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlogEntriesCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/blog_entries/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const blogEntriesDestroy = <ThrowOnError extends boolean = false>(options: Options<BlogEntriesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BlogEntriesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/blog_entries/{id}/',
        ...options
    });
};

export const blogEntriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BlogEntriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogEntriesRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/blog_entries/{id}/',
        ...options
    });
};

export const blogEntriesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<BlogEntriesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BlogEntriesPartialUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/blog_entries/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const blogEntriesUpdate = <ThrowOnError extends boolean = false>(options: Options<BlogEntriesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BlogEntriesUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/blog_entries/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const eventsList = <ThrowOnError extends boolean = false>(options?: Options<EventsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/events/',
        ...options
    });
};

export const eventsCreate = <ThrowOnError extends boolean = false>(options: Options<EventsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EventsCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/events/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const eventsDestroy = <ThrowOnError extends boolean = false>(options: Options<EventsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EventsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/events/{id}/',
        ...options
    });
};

export const eventsRetrieve = <ThrowOnError extends boolean = false>(options: Options<EventsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventsRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/events/{id}/',
        ...options
    });
};

export const eventsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<EventsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EventsPartialUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/events/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const eventsUpdate = <ThrowOnError extends boolean = false>(options: Options<EventsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EventsUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/events/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userCompoEntriesList = <ThrowOnError extends boolean = false>(options?: Options<UserCompoEntriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCompoEntriesListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/user_compo_entries/',
        ...options
    });
};

export const userCompoEntriesCreate = <ThrowOnError extends boolean = false>(options: Options<UserCompoEntriesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserCompoEntriesCreateResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/user_compo_entries/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const userCompoEntriesDestroy = <ThrowOnError extends boolean = false>(options: Options<UserCompoEntriesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UserCompoEntriesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/user_compo_entries/{id}/',
        ...options
    });
};

export const userCompoEntriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserCompoEntriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserCompoEntriesRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/user_compo_entries/{id}/',
        ...options
    });
};

export const userCompoEntriesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UserCompoEntriesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UserCompoEntriesPartialUpdateResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/user_compo_entries/{id}/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const userCompoEntriesUpdate = <ThrowOnError extends boolean = false>(options: Options<UserCompoEntriesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserCompoEntriesUpdateResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/user_compo_entries/{id}/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const userInfo = <ThrowOnError extends boolean = false>(options?: Options<UserInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserInfoResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/user_info/',
        ...options
    });
};

export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/users/',
        ...options
    });
};

export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/users/{id}/',
        ...options
    });
};

export const usersRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/users/{id}/',
        ...options
    });
};

export const usersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPartialUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};