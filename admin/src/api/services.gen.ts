// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from "./core/BaseHttpRequest";
import type { CancelablePromise } from "./core/CancelablePromise";
import type { $OpenApiTs } from "./types.gen";

export class AuthService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns void No response body
     * @throws ApiError
     */
    public login(
        data: $OpenApiTs["/api/v2/auth/login/"]["post"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/auth/login/"]["post"]["res"][204]> {
        const { requestBody } = data;
        return this.httpRequest.request({
            method: "POST",
            url: "/api/v2/auth/login/",
            body: requestBody,
            mediaType: "application/json",
            errors: {
                400: "No response body",
                401: "No response body",
            },
        });
    }

    /**
     * @returns void No response body
     * @throws ApiError
     */
    public logout(): CancelablePromise<$OpenApiTs["/api/v2/auth/logout/"]["post"]["res"][204]> {
        return this.httpRequest.request({
            method: "POST",
            url: "/api/v2/auth/logout/",
        });
    }

    /**
     * Returns a list of URLs that can be used to begin a social authentication process.
     * @returns SocialAuthURL
     * @throws ApiError
     */
    public getSocialAuthUrls(
        data: $OpenApiTs["/api/v2/auth/social_urls/"]["get"]["req"] = {}
    ): CancelablePromise<$OpenApiTs["/api/v2/auth/social_urls/"]["get"]["res"][200]> {
        const { next } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/auth/social_urls/",
            query: {
                next,
            },
        });
    }
}

export class BlogEntriesService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns PaginatedBlogEntryList
     * @throws ApiError
     */
    public blogEntriesList(
        data: $OpenApiTs["/api/v2/blog_entries/"]["get"]["req"] = {}
    ): CancelablePromise<$OpenApiTs["/api/v2/blog_entries/"]["get"]["res"][200]> {
        const { event, limit, offset, ordering, search, user } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/blog_entries/",
            query: {
                event,
                limit,
                offset,
                ordering,
                search,
                user,
            },
        });
    }

    /**
     * @returns BlogEntry
     * @throws ApiError
     */
    public blogEntriesCreate(
        data: $OpenApiTs["/api/v2/blog_entries/"]["post"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/blog_entries/"]["post"]["res"][201]> {
        const { requestBody } = data;
        return this.httpRequest.request({
            method: "POST",
            url: "/api/v2/blog_entries/",
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns BlogEntry
     * @throws ApiError
     */
    public blogEntriesRetrieve(
        data: $OpenApiTs["/api/v2/blog_entries/{id}/"]["get"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/blog_entries/{id}/"]["get"]["res"][200]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/blog_entries/{id}/",
            path: {
                id,
            },
        });
    }

    /**
     * @returns BlogEntry
     * @throws ApiError
     */
    public blogEntriesUpdate(
        data: $OpenApiTs["/api/v2/blog_entries/{id}/"]["put"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/blog_entries/{id}/"]["put"]["res"][200]> {
        const { id, requestBody } = data;
        return this.httpRequest.request({
            method: "PUT",
            url: "/api/v2/blog_entries/{id}/",
            path: {
                id,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns BlogEntry
     * @throws ApiError
     */
    public blogEntriesPartialUpdate(
        data: $OpenApiTs["/api/v2/blog_entries/{id}/"]["patch"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/blog_entries/{id}/"]["patch"]["res"][200]> {
        const { id, requestBody } = data;
        return this.httpRequest.request({
            method: "PATCH",
            url: "/api/v2/blog_entries/{id}/",
            path: {
                id,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns void No response body
     * @throws ApiError
     */
    public blogEntriesDestroy(
        data: $OpenApiTs["/api/v2/blog_entries/{id}/"]["delete"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/blog_entries/{id}/"]["delete"]["res"][204]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "DELETE",
            url: "/api/v2/blog_entries/{id}/",
            path: {
                id,
            },
        });
    }
}

export class EventsService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns PaginatedEventList
     * @throws ApiError
     */
    public eventsList(
        data: $OpenApiTs["/api/v2/events/"]["get"]["req"] = {}
    ): CancelablePromise<$OpenApiTs["/api/v2/events/"]["get"]["res"][200]> {
        const { limit, name, offset, ordering } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/events/",
            query: {
                limit,
                name,
                offset,
                ordering,
            },
        });
    }

    /**
     * @returns Event
     * @throws ApiError
     */
    public eventsCreate(
        data: $OpenApiTs["/api/v2/events/"]["post"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/events/"]["post"]["res"][201]> {
        const { requestBody } = data;
        return this.httpRequest.request({
            method: "POST",
            url: "/api/v2/events/",
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns Event
     * @throws ApiError
     */
    public eventsRetrieve(
        data: $OpenApiTs["/api/v2/events/{id}/"]["get"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/events/{id}/"]["get"]["res"][200]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/events/{id}/",
            path: {
                id,
            },
        });
    }

    /**
     * @returns Event
     * @throws ApiError
     */
    public eventsUpdate(
        data: $OpenApiTs["/api/v2/events/{id}/"]["put"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/events/{id}/"]["put"]["res"][200]> {
        const { id, requestBody } = data;
        return this.httpRequest.request({
            method: "PUT",
            url: "/api/v2/events/{id}/",
            path: {
                id,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns Event
     * @throws ApiError
     */
    public eventsPartialUpdate(
        data: $OpenApiTs["/api/v2/events/{id}/"]["patch"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/events/{id}/"]["patch"]["res"][200]> {
        const { id, requestBody } = data;
        return this.httpRequest.request({
            method: "PATCH",
            url: "/api/v2/events/{id}/",
            path: {
                id,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns void No response body
     * @throws ApiError
     */
    public eventsDestroy(
        data: $OpenApiTs["/api/v2/events/{id}/"]["delete"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/events/{id}/"]["delete"]["res"][204]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "DELETE",
            url: "/api/v2/events/{id}/",
            path: {
                id,
            },
        });
    }
}

export class UserCompoEntriesService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns PaginatedCompoEntryList
     * @throws ApiError
     */
    public userCompoEntriesList(
        data: $OpenApiTs["/api/v2/user_compo_entries/"]["get"]["req"] = {}
    ): CancelablePromise<$OpenApiTs["/api/v2/user_compo_entries/"]["get"]["res"][200]> {
        const { limit, offset, ordering } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/user_compo_entries/",
            query: {
                limit,
                offset,
                ordering,
            },
        });
    }

    /**
     * @returns CompoEntry
     * @throws ApiError
     */
    public userCompoEntriesCreate(
        data: $OpenApiTs["/api/v2/user_compo_entries/"]["post"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/user_compo_entries/"]["post"]["res"][201]> {
        const { formData } = data;
        return this.httpRequest.request({
            method: "POST",
            url: "/api/v2/user_compo_entries/",
            formData,
            mediaType: "multipart/form-data",
        });
    }

    /**
     * @returns CompoEntry
     * @throws ApiError
     */
    public userCompoEntriesRetrieve(
        data: $OpenApiTs["/api/v2/user_compo_entries/{id}/"]["get"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/user_compo_entries/{id}/"]["get"]["res"][200]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/user_compo_entries/{id}/",
            path: {
                id,
            },
        });
    }

    /**
     * @returns CompoEntry
     * @throws ApiError
     */
    public userCompoEntriesUpdate(
        data: $OpenApiTs["/api/v2/user_compo_entries/{id}/"]["put"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/user_compo_entries/{id}/"]["put"]["res"][200]> {
        const { id, formData } = data;
        return this.httpRequest.request({
            method: "PUT",
            url: "/api/v2/user_compo_entries/{id}/",
            path: {
                id,
            },
            formData,
            mediaType: "multipart/form-data",
        });
    }

    /**
     * @returns CompoEntry
     * @throws ApiError
     */
    public userCompoEntriesPartialUpdate(
        data: $OpenApiTs["/api/v2/user_compo_entries/{id}/"]["patch"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/user_compo_entries/{id}/"]["patch"]["res"][200]> {
        const { id, formData } = data;
        return this.httpRequest.request({
            method: "PATCH",
            url: "/api/v2/user_compo_entries/{id}/",
            path: {
                id,
            },
            formData,
            mediaType: "multipart/form-data",
        });
    }

    /**
     * @returns void No response body
     * @throws ApiError
     */
    public userCompoEntriesDestroy(
        data: $OpenApiTs["/api/v2/user_compo_entries/{id}/"]["delete"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/user_compo_entries/{id}/"]["delete"]["res"][204]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "DELETE",
            url: "/api/v2/user_compo_entries/{id}/",
            path: {
                id,
            },
        });
    }
}

export class UserInfoService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns UserInfo
     * @throws ApiError
     */
    public userInfo(): CancelablePromise<$OpenApiTs["/api/v2/user_info/"]["get"]["res"][200]> {
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/user_info/",
        });
    }
}

export class UsersService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * @returns PaginatedUserList
     * @throws ApiError
     */
    public usersList(
        data: $OpenApiTs["/api/v2/users/"]["get"]["req"] = {}
    ): CancelablePromise<$OpenApiTs["/api/v2/users/"]["get"]["res"][200]> {
        const { email, limit, offset, ordering, search, username } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/users/",
            query: {
                email,
                limit,
                offset,
                ordering,
                search,
                username,
            },
        });
    }

    /**
     * @returns User
     * @throws ApiError
     */
    public usersCreate(
        data: $OpenApiTs["/api/v2/users/"]["post"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/users/"]["post"]["res"][201]> {
        const { requestBody } = data;
        return this.httpRequest.request({
            method: "POST",
            url: "/api/v2/users/",
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns User
     * @throws ApiError
     */
    public usersRetrieve(
        data: $OpenApiTs["/api/v2/users/{id}/"]["get"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/users/{id}/"]["get"]["res"][200]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "GET",
            url: "/api/v2/users/{id}/",
            path: {
                id,
            },
        });
    }

    /**
     * @returns User
     * @throws ApiError
     */
    public usersUpdate(
        data: $OpenApiTs["/api/v2/users/{id}/"]["put"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/users/{id}/"]["put"]["res"][200]> {
        const { id, requestBody } = data;
        return this.httpRequest.request({
            method: "PUT",
            url: "/api/v2/users/{id}/",
            path: {
                id,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns User
     * @throws ApiError
     */
    public usersPartialUpdate(
        data: $OpenApiTs["/api/v2/users/{id}/"]["patch"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/users/{id}/"]["patch"]["res"][200]> {
        const { id, requestBody } = data;
        return this.httpRequest.request({
            method: "PATCH",
            url: "/api/v2/users/{id}/",
            path: {
                id,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }

    /**
     * @returns void No response body
     * @throws ApiError
     */
    public usersDestroy(
        data: $OpenApiTs["/api/v2/users/{id}/"]["delete"]["req"]
    ): CancelablePromise<$OpenApiTs["/api/v2/users/{id}/"]["delete"]["res"][204]> {
        const { id } = data;
        return this.httpRequest.request({
            method: "DELETE",
            url: "/api/v2/users/{id}/",
            path: {
                id,
            },
        });
    }
}
