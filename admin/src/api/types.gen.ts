// This file is auto-generated by @hey-api/openapi-ts

export type AlternateEntryFile = {
    readonly format: string;
    readonly url: string;
};

export type BlogEntryReadable = {
    readonly id: number;
    user?: number;
    /**
     * Aika
     */
    readonly date: string;
    /**
     * Otsikko
     * Lyhyt otsikko entrylle.
     */
    title: string;
    /**
     * Teksti
     */
    text: string;
    /**
     * Julkinen
     * Mikäli entry on julkinen, tulee se näkyviin sekä tapahtuman sivuille että RSS-syötteeseen.
     */
    public?: boolean;
    /**
     * Tapahtuma
     */
    event: number;
    readonly created_by: string;
};

export type BlogEntryWritable = {
    user?: number;
    /**
     * Otsikko
     * Lyhyt otsikko entrylle.
     */
    title: string;
    /**
     * Teksti
     */
    text: string;
    /**
     * Julkinen
     * Mikäli entry on julkinen, tulee se näkyviin sekä tapahtuman sivuille että RSS-syötteeseen.
     */
    public?: boolean;
    /**
     * Tapahtuma
     */
    event: number;
};

export type BlogEntryRequest = {
    user?: number;
    /**
     * Otsikko
     * Lyhyt otsikko entrylle.
     */
    title: string;
    /**
     * Teksti
     */
    text: string;
    /**
     * Julkinen
     * Mikäli entry on julkinen, tulee se näkyviin sekä tapahtuman sivuille että RSS-syötteeseen.
     */
    public?: boolean;
    /**
     * Tapahtuma
     */
    event: number;
};

export type CompoEntryReadable = {
    readonly id: number;
    /**
     * Kompo
     * Kompo johon osallistutaan
     */
    compo: number;
    /**
     * Nimi
     * Nimi tuotokselle
     */
    name: string;
    /**
     * Kuvaus
     * Voi sisältää mm. tietoja käytetyistä tekniikoista, muuta sanottavaa.
     */
    description: string;
    /**
     * Tekijä
     * Tuotoksen tekijän tai tekijäryhmän nimi
     */
    creator: string;
    /**
     * Alusta
     * Alusta jolla entry toimii. Voit jättää tyhjäksi jos entry ei sisällä ajettavaa koodia.
     */
    platform?: string | null;
    readonly entry_file_url: string | null;
    readonly source_file_url: string | null;
    readonly image_file_original_url: string | null;
    readonly image_file_thumbnail_url: string | null;
    readonly image_file_medium_url: string | null;
    readonly youtube_url: string | null;
    readonly disqualified: boolean | null;
    readonly disqualified_reason: string | null;
    readonly score: number | null;
    readonly rank: number | null;
    readonly alternate_files: Array<AlternateEntryFile>;
};

export type CompoEntryWritable = {
    /**
     * Kompo
     * Kompo johon osallistutaan
     */
    compo: number;
    /**
     * Nimi
     * Nimi tuotokselle
     */
    name: string;
    /**
     * Kuvaus
     * Voi sisältää mm. tietoja käytetyistä tekniikoista, muuta sanottavaa.
     */
    description: string;
    /**
     * Tekijä
     * Tuotoksen tekijän tai tekijäryhmän nimi
     */
    creator: string;
    /**
     * Alusta
     * Alusta jolla entry toimii. Voit jättää tyhjäksi jos entry ei sisällä ajettavaa koodia.
     */
    platform?: string | null;
};

export type CompoEntryRequest = {
    /**
     * Kompo
     * Kompo johon osallistutaan
     */
    compo: number;
    /**
     * Nimi
     * Nimi tuotokselle
     */
    name: string;
    /**
     * Kuvaus
     * Voi sisältää mm. tietoja käytetyistä tekniikoista, muuta sanottavaa.
     */
    description: string;
    /**
     * Tekijä
     * Tuotoksen tekijän tai tekijäryhmän nimi
     */
    creator: string;
    /**
     * Alusta
     * Alusta jolla entry toimii. Voit jättää tyhjäksi jos entry ei sisällä ajettavaa koodia.
     */
    platform?: string | null;
};

export type EventReadable = {
    readonly id: number;
    /**
     * Nimi
     * Tapahtuman nimi
     */
    name: string;
    /**
     * Lyhyt esitys
     * Lyhyt nimi, eg. vuosi
     */
    tag?: string | null;
    /**
     * Päivämäärä
     * Tapahtuman päivämäärä (alku)
     */
    date: string;
    /**
     * Arkistoitu
     * Saa näyttää arkistossa
     */
    archived?: boolean;
    /**
     * Tapahtuman pääsivu
     * URL Tapahtuman pääsivustolle
     */
    mainurl?: string;
};

export type EventWritable = {
    /**
     * Nimi
     * Tapahtuman nimi
     */
    name: string;
    /**
     * Lyhyt esitys
     * Lyhyt nimi, eg. vuosi
     */
    tag?: string | null;
    /**
     * Päivämäärä
     * Tapahtuman päivämäärä (alku)
     */
    date: string;
    /**
     * Arkistoitu
     * Saa näyttää arkistossa
     */
    archived?: boolean;
    /**
     * Tapahtuman pääsivu
     * URL Tapahtuman pääsivustolle
     */
    mainurl?: string;
};

export type EventRequest = {
    /**
     * Nimi
     * Tapahtuman nimi
     */
    name: string;
    /**
     * Lyhyt esitys
     * Lyhyt nimi, eg. vuosi
     */
    tag?: string | null;
    /**
     * Päivämäärä
     * Tapahtuman päivämäärä (alku)
     */
    date: string;
    /**
     * Arkistoitu
     * Saa näyttää arkistossa
     */
    archived?: boolean;
    /**
     * Tapahtuman pääsivu
     * URL Tapahtuman pääsivustolle
     */
    mainurl?: string;
};

export type Group = {
    /**
     * Nimi
     */
    name: string;
};

export type GroupRequest = {
    /**
     * Nimi
     */
    name: string;
};

export type PaginatedBlogEntryListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<BlogEntryReadable>;
};

export type PaginatedBlogEntryListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<BlogEntryWritable>;
};

export type PaginatedCompoEntryListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<CompoEntryReadable>;
};

export type PaginatedCompoEntryListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<CompoEntryWritable>;
};

export type PaginatedEventListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<EventReadable>;
};

export type PaginatedEventListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<EventWritable>;
};

export type PaginatedUserListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<UserReadable>;
};

export type PaginatedUserListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<UserWritable>;
};

export type PatchedBlogEntryRequest = {
    user?: number;
    /**
     * Otsikko
     * Lyhyt otsikko entrylle.
     */
    title?: string;
    /**
     * Teksti
     */
    text?: string;
    /**
     * Julkinen
     * Mikäli entry on julkinen, tulee se näkyviin sekä tapahtuman sivuille että RSS-syötteeseen.
     */
    public?: boolean;
    /**
     * Tapahtuma
     */
    event?: number;
};

export type PatchedCompoEntryRequest = {
    /**
     * Kompo
     * Kompo johon osallistutaan
     */
    compo?: number;
    /**
     * Nimi
     * Nimi tuotokselle
     */
    name?: string;
    /**
     * Kuvaus
     * Voi sisältää mm. tietoja käytetyistä tekniikoista, muuta sanottavaa.
     */
    description?: string;
    /**
     * Tekijä
     * Tuotoksen tekijän tai tekijäryhmän nimi
     */
    creator?: string;
    /**
     * Alusta
     * Alusta jolla entry toimii. Voit jättää tyhjäksi jos entry ei sisällä ajettavaa koodia.
     */
    platform?: string | null;
};

export type PatchedEventRequest = {
    /**
     * Nimi
     * Tapahtuman nimi
     */
    name?: string;
    /**
     * Lyhyt esitys
     * Lyhyt nimi, eg. vuosi
     */
    tag?: string | null;
    /**
     * Päivämäärä
     * Tapahtuman päivämäärä (alku)
     */
    date?: string;
    /**
     * Arkistoitu
     * Saa näyttää arkistossa
     */
    archived?: boolean;
    /**
     * Tapahtuman pääsivu
     * URL Tapahtuman pääsivustolle
     */
    mainurl?: string;
};

export type PatchedUserRequest = {
    /**
     * Käyttäjätunnus
     * Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.
     */
    username?: string;
    /**
     * Etunimi
     */
    first_name?: string;
    /**
     * Sukunimi
     */
    last_name?: string;
    /**
     * Sähköpostiosoite
     */
    email?: string;
    /**
     * Voimassa
     * Määrää, voiko käyttäjä kirjautua sisään. Tällä voi estää käyttäjätilin käytön poistamatta sitä.
     */
    is_active?: boolean;
};

export type Permission = {
    /**
     * Nimi
     */
    name: string;
    /**
     * Tunniste
     */
    codename: string;
};

export type PermissionRequest = {
    /**
     * Nimi
     */
    name: string;
    /**
     * Tunniste
     */
    codename: string;
};

export type SocialAuthUrl = {
    method: string;
    url: string;
    name: string;
};

export type UserReadable = {
    readonly id: number;
    /**
     * Käyttäjätunnus
     * Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.
     */
    username: string;
    /**
     * Etunimi
     */
    first_name?: string;
    /**
     * Sukunimi
     */
    last_name?: string;
    /**
     * Sähköpostiosoite
     */
    email?: string;
    readonly user_permissions: Array<Permission>;
    /**
     * Pääkäyttäjä
     * Antaa käyttäjälle kaikki oikeudet ilman, että niitä täytyy erikseen luetella.
     */
    readonly is_superuser: boolean;
    /**
     * Liittynyt
     */
    readonly date_joined: string;
    readonly groups: Array<Group>;
    /**
     * Voimassa
     * Määrää, voiko käyttäjä kirjautua sisään. Tällä voi estää käyttäjätilin käytön poistamatta sitä.
     */
    is_active?: boolean;
};

export type UserWritable = {
    /**
     * Käyttäjätunnus
     * Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.
     */
    username: string;
    /**
     * Etunimi
     */
    first_name?: string;
    /**
     * Sukunimi
     */
    last_name?: string;
    /**
     * Sähköpostiosoite
     */
    email?: string;
    /**
     * Voimassa
     * Määrää, voiko käyttäjä kirjautua sisään. Tällä voi estää käyttäjätilin käytön poistamatta sitä.
     */
    is_active?: boolean;
};

export type UserInfoReadable = {
    readonly id: number;
    /**
     * Käyttäjätunnus
     * Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.
     */
    username: string;
    /**
     * Etunimi
     */
    first_name?: string;
    /**
     * Sukunimi
     */
    last_name?: string;
    /**
     * Sähköpostiosoite
     */
    email?: string;
    readonly user_permissions: Array<Permission>;
    /**
     * Pääkäyttäjä
     * Antaa käyttäjälle kaikki oikeudet ilman, että niitä täytyy erikseen luetella.
     */
    readonly is_superuser: boolean;
    /**
     * Liittynyt
     */
    readonly date_joined: string;
};

export type UserInfoWritable = {
    /**
     * Käyttäjätunnus
     * Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.
     */
    username: string;
    /**
     * Etunimi
     */
    first_name?: string;
    /**
     * Sukunimi
     */
    last_name?: string;
    /**
     * Sähköpostiosoite
     */
    email?: string;
};

export type UserLoginRequest = {
    username: string;
    password: string;
};

export type UserRequest = {
    /**
     * Käyttäjätunnus
     * Vaaditaan. Enintään 150 merkkiä. Vain kirjaimet, numerot ja @/./+/-/_ ovat sallittuja.
     */
    username: string;
    /**
     * Etunimi
     */
    first_name?: string;
    /**
     * Sukunimi
     */
    last_name?: string;
    /**
     * Sähköpostiosoite
     */
    email?: string;
    /**
     * Voimassa
     * Määrää, voiko käyttäjä kirjautua sisään. Tällä voi estää käyttäjätilin käytön poistamatta sitä.
     */
    is_active?: boolean;
};

export type LoginData = {
    body: UserLoginRequest;
    path?: never;
    query?: never;
    url: '/api/v2/auth/login/';
};

export type LoginErrors = {
    /**
     * No response body
     */
    400: unknown;
    /**
     * No response body
     */
    401: unknown;
};

export type LoginResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/auth/logout/';
};

export type LogoutResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type GetSocialAuthUrlsData = {
    body?: never;
    path?: never;
    query?: {
        next?: string;
    };
    url: '/api/v2/auth/social_urls/';
};

export type GetSocialAuthUrlsResponses = {
    200: Array<SocialAuthUrl>;
};

export type GetSocialAuthUrlsResponse = GetSocialAuthUrlsResponses[keyof GetSocialAuthUrlsResponses];

export type BlogEntriesListData = {
    body?: never;
    path?: never;
    query?: {
        event?: number;
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A search term.
         */
        search?: string;
        user?: number;
    };
    url: '/api/v2/blog_entries/';
};

export type BlogEntriesListResponses = {
    200: PaginatedBlogEntryListReadable;
};

export type BlogEntriesListResponse = BlogEntriesListResponses[keyof BlogEntriesListResponses];

export type BlogEntriesCreateData = {
    body: BlogEntryRequest;
    path?: never;
    query?: never;
    url: '/api/v2/blog_entries/';
};

export type BlogEntriesCreateResponses = {
    201: BlogEntryReadable;
};

export type BlogEntriesCreateResponse = BlogEntriesCreateResponses[keyof BlogEntriesCreateResponses];

export type BlogEntriesDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this entry.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/blog_entries/{id}/';
};

export type BlogEntriesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type BlogEntriesDestroyResponse = BlogEntriesDestroyResponses[keyof BlogEntriesDestroyResponses];

export type BlogEntriesRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this entry.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/blog_entries/{id}/';
};

export type BlogEntriesRetrieveResponses = {
    200: BlogEntryReadable;
};

export type BlogEntriesRetrieveResponse = BlogEntriesRetrieveResponses[keyof BlogEntriesRetrieveResponses];

export type BlogEntriesPartialUpdateData = {
    body?: PatchedBlogEntryRequest;
    path: {
        /**
         * A unique integer value identifying this entry.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/blog_entries/{id}/';
};

export type BlogEntriesPartialUpdateResponses = {
    200: BlogEntryReadable;
};

export type BlogEntriesPartialUpdateResponse = BlogEntriesPartialUpdateResponses[keyof BlogEntriesPartialUpdateResponses];

export type BlogEntriesUpdateData = {
    body: BlogEntryRequest;
    path: {
        /**
         * A unique integer value identifying this entry.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/blog_entries/{id}/';
};

export type BlogEntriesUpdateResponses = {
    200: BlogEntryReadable;
};

export type BlogEntriesUpdateResponse = BlogEntriesUpdateResponses[keyof BlogEntriesUpdateResponses];

export type EventsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results to return per page.
         */
        limit?: number;
        name?: string;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
    };
    url: '/api/v2/events/';
};

export type EventsListResponses = {
    200: PaginatedEventListReadable;
};

export type EventsListResponse = EventsListResponses[keyof EventsListResponses];

export type EventsCreateData = {
    body: EventRequest;
    path?: never;
    query?: never;
    url: '/api/v2/events/';
};

export type EventsCreateResponses = {
    201: EventReadable;
};

export type EventsCreateResponse = EventsCreateResponses[keyof EventsCreateResponses];

export type EventsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this tapahtuma.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/events/{id}/';
};

export type EventsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type EventsDestroyResponse = EventsDestroyResponses[keyof EventsDestroyResponses];

export type EventsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this tapahtuma.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/events/{id}/';
};

export type EventsRetrieveResponses = {
    200: EventReadable;
};

export type EventsRetrieveResponse = EventsRetrieveResponses[keyof EventsRetrieveResponses];

export type EventsPartialUpdateData = {
    body?: PatchedEventRequest;
    path: {
        /**
         * A unique integer value identifying this tapahtuma.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/events/{id}/';
};

export type EventsPartialUpdateResponses = {
    200: EventReadable;
};

export type EventsPartialUpdateResponse = EventsPartialUpdateResponses[keyof EventsPartialUpdateResponses];

export type EventsUpdateData = {
    body: EventRequest;
    path: {
        /**
         * A unique integer value identifying this tapahtuma.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/events/{id}/';
};

export type EventsUpdateResponses = {
    200: EventReadable;
};

export type EventsUpdateResponse = EventsUpdateResponses[keyof EventsUpdateResponses];

export type UserCompoEntriesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
    };
    url: '/api/v2/user_compo_entries/';
};

export type UserCompoEntriesListResponses = {
    200: PaginatedCompoEntryListReadable;
};

export type UserCompoEntriesListResponse = UserCompoEntriesListResponses[keyof UserCompoEntriesListResponses];

export type UserCompoEntriesCreateData = {
    body: CompoEntryRequest;
    path?: never;
    query?: never;
    url: '/api/v2/user_compo_entries/';
};

export type UserCompoEntriesCreateResponses = {
    201: CompoEntryReadable;
};

export type UserCompoEntriesCreateResponse = UserCompoEntriesCreateResponses[keyof UserCompoEntriesCreateResponses];

export type UserCompoEntriesDestroyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v2/user_compo_entries/{id}/';
};

export type UserCompoEntriesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UserCompoEntriesDestroyResponse = UserCompoEntriesDestroyResponses[keyof UserCompoEntriesDestroyResponses];

export type UserCompoEntriesRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v2/user_compo_entries/{id}/';
};

export type UserCompoEntriesRetrieveResponses = {
    200: CompoEntryReadable;
};

export type UserCompoEntriesRetrieveResponse = UserCompoEntriesRetrieveResponses[keyof UserCompoEntriesRetrieveResponses];

export type UserCompoEntriesPartialUpdateData = {
    body?: PatchedCompoEntryRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v2/user_compo_entries/{id}/';
};

export type UserCompoEntriesPartialUpdateResponses = {
    200: CompoEntryReadable;
};

export type UserCompoEntriesPartialUpdateResponse = UserCompoEntriesPartialUpdateResponses[keyof UserCompoEntriesPartialUpdateResponses];

export type UserCompoEntriesUpdateData = {
    body: CompoEntryRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v2/user_compo_entries/{id}/';
};

export type UserCompoEntriesUpdateResponses = {
    200: CompoEntryReadable;
};

export type UserCompoEntriesUpdateResponse = UserCompoEntriesUpdateResponses[keyof UserCompoEntriesUpdateResponses];

export type UserInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/user_info/';
};

export type UserInfoResponses = {
    200: Array<UserInfoReadable>;
};

export type UserInfoResponse = UserInfoResponses[keyof UserInfoResponses];

export type UsersListData = {
    body?: never;
    path?: never;
    query?: {
        email?: string;
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A search term.
         */
        search?: string;
        username?: string;
    };
    url: '/api/v2/users/';
};

export type UsersListResponses = {
    200: PaginatedUserListReadable;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersCreateData = {
    body: UserRequest;
    path?: never;
    query?: never;
    url: '/api/v2/users/';
};

export type UsersCreateResponses = {
    201: UserReadable;
};

export type UsersCreateResponse = UsersCreateResponses[keyof UsersCreateResponses];

export type UsersDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this käyttäjä.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/users/{id}/';
};

export type UsersDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UsersDestroyResponse = UsersDestroyResponses[keyof UsersDestroyResponses];

export type UsersRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this käyttäjä.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/users/{id}/';
};

export type UsersRetrieveResponses = {
    200: UserReadable;
};

export type UsersRetrieveResponse = UsersRetrieveResponses[keyof UsersRetrieveResponses];

export type UsersPartialUpdateData = {
    body?: PatchedUserRequest;
    path: {
        /**
         * A unique integer value identifying this käyttäjä.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/users/{id}/';
};

export type UsersPartialUpdateResponses = {
    200: UserReadable;
};

export type UsersPartialUpdateResponse = UsersPartialUpdateResponses[keyof UsersPartialUpdateResponses];

export type UsersUpdateData = {
    body: UserRequest;
    path: {
        /**
         * A unique integer value identifying this käyttäjä.
         */
        id: number;
    };
    query?: never;
    url: '/api/v2/users/{id}/';
};

export type UsersUpdateResponses = {
    200: UserReadable;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];

export type ClientOptions = {
    baseURL: `${string}://openapi` | (string & {});
};