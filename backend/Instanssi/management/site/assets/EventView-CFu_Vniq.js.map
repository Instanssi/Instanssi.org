{"version":3,"file":"EventView-CFu_Vniq.js","sources":["../../../../../admin/src/components/EventDialog.vue","../../../../../admin/src/views/EventView.vue"],"sourcesContent":["<template>\n    <BaseFormDialog\n        :title=\"t('EventDialog.title')\"\n        :ok-text=\"t('General.save')\"\n        ok-icon=\"fas fa-floppy-disk\"\n        :width=\"1000\"\n        @submit=\"submit\"\n        ref=\"dialog\"\n    >\n        <v-form>\n            <v-text-field\n                v-model=\"name.value.value\"\n                :error-messages=\"name.errorMessage.value\"\n                variant=\"outlined\"\n                :label=\"t('EventDialog.labels.name')\"\n            />\n            <v-text-field\n                v-model=\"tag.value.value\"\n                :error-messages=\"tag.errorMessage.value\"\n                variant=\"outlined\"\n                :label=\"t('EventDialog.labels.tag')\"\n            />\n            <v-text-field\n                type=\"date\"\n                v-model=\"date.value.value\"\n                :error-messages=\"date.errorMessage.value\"\n                variant=\"outlined\"\n                :label=\"t('EventDialog.labels.date')\"\n            />\n            <v-text-field\n                v-model=\"mainUrl.value.value\"\n                :error-messages=\"mainUrl.errorMessage.value\"\n                variant=\"outlined\"\n                :label=\"t('EventDialog.labels.mainUrl')\"\n            />\n            <v-switch\n                v-model=\"archived.value.value\"\n                :error-messages=\"archived.errorMessage.value\"\n                :label=\"archivedLabel\"\n            />\n        </v-form>\n    </BaseFormDialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { type GenericObject, useField, useForm } from \"vee-validate\";\nimport { type Ref, computed, ref } from \"vue\";\nimport { useI18n } from \"vue-i18n\";\nimport { useToast } from \"vue-toastification\";\nimport {\n    date as YupDate,\n    boolean as yupBoolean,\n    object as yupObject,\n    string as yupString,\n} from \"yup\";\n\nimport type { Event } from \"@/api\";\nimport BaseFormDialog from \"@/components/BaseFormDialog.vue\";\nimport BaseDialog from \"@/components/BaseInfoDialog.vue\";\nimport { useAPI } from \"@/services/api\";\n\nconst dialog: Ref<InstanceType<typeof BaseDialog> | undefined> = ref();\n\nconst { t } = useI18n();\nconst api = useAPI();\nconst toast = useToast();\nconst existingId: Ref<number | undefined> = ref(0);\nconst archivedLabel = computed(() =>\n    archived.value ? t(\"EventDialog.labels.isArchived\") : t(\"EventDialog.labels.isNotArchived\")\n);\n\n// Form validation\nconst validationSchema = yupObject({\n    name: yupString().required().min(1).max(64),\n    tag: yupString().required().min(1).max(8),\n    date: YupDate().required(),\n    archived: yupBoolean(),\n    mainUrl: yupString().required().url().max(200),\n});\nconst { handleSubmit, setTouched, resetForm, setValues } = useForm({ validationSchema });\nconst name = useField<string>(\"name\");\nconst tag = useField<string>(\"tag\");\nconst date = useField<string>(\"date\");\nconst archived = useField<boolean>(\"archived\");\nconst mainUrl = useField<string>(\"mainUrl\");\nconst submit = handleSubmit(async (values) => {\n    let ok: boolean;\n    if (existingId.value !== undefined) {\n        ok = await editItem(existingId.value, values);\n    } else {\n        ok = await createItem(values);\n    }\n    if (ok) {\n        dialog.value?.setResult(true);\n    }\n});\n\nasync function createItem(values: GenericObject) {\n    try {\n        await api.events.eventsCreate({\n            name: values.name,\n            date: values.date,\n            archived: values.archived,\n            tag: values.tag,\n            mainurl: values.mainUrl,\n        });\n        toast.success(t(\"EventDialog.createSuccess\"));\n        return true;\n    } catch (e) {\n        toast.error(t(\"EventDialog.createFailure\"));\n        console.error(e);\n    }\n    return false;\n}\n\nasync function editItem(itemId: number, values: GenericObject) {\n    try {\n        await api.events.eventsPartialUpdate(itemId, {\n            name: values.name,\n            date: values.date,\n            archived: values.archived,\n            tag: values.tag,\n            mainurl: values.mainUrl,\n        });\n        toast.success(t(\"EventDialog.editSuccess\"));\n        return true;\n    } catch (e) {\n        toast.error(t(\"EventDialog.editFailure\"));\n        console.error(e);\n    }\n    return false;\n}\n\nasync function modal(item: Event | undefined = undefined) {\n    if (item !== undefined) {\n        existingId.value = item.id;\n        setValues({\n            name: item.name,\n            tag: item.tag,\n            date: item.date,\n            archived: item.archived ?? false,\n            mainUrl: item.mainurl ?? \"\",\n        });\n    } else {\n        existingId.value = undefined;\n        resetForm();\n        setTouched(false);\n    }\n    return (await dialog.value?.modal()) ?? false;\n}\n\ndefineExpose({ modal });\n</script>\n","<template>\n    <LayoutBase :title=\"t('EventView.title')\">\n        <v-col>\n            <v-row>\n                <v-btn\n                    v-if=\"auth.canAdd(PermissionTarget.EVENT)\"\n                    prepend-icon=\"fas fa-plus\"\n                    @click=\"createEvent\"\n                >\n                    {{ t(\"EventView.newEvent\") }}\n                </v-btn>\n            </v-row>\n        </v-col>\n        <v-col>\n            <v-row>\n                <v-data-table-server\n                    class=\"elevation-1 primary\"\n                    item-value=\"id\"\n                    density=\"compact\"\n                    :key=\"`blog-table-${refreshKey}`\"\n                    :headers=\"headers\"\n                    :items=\"events\"\n                    :items-length=\"totalItems\"\n                    :loading=\"loading\"\n                    :page=\"currentPage\"\n                    :items-per-page-options=\"pageSizeOptions\"\n                    :no-data-text=\"t('EventView.noEventsFound')\"\n                    :loading-text=\"t('EventView.loadingEvents')\"\n                    v-model:items-per-page=\"perPage\"\n                    @update:options=\"debouncedLoad\"\n                >\n                    <template v-slot:item.archived=\"{ item }\">\n                        <v-icon v-if=\"item.archived\" icon=\"fas fa-check\" color=\"green\" />\n                        <v-icon v-else icon=\"fas fa-xmark\" color=\"red\" />\n                    </template>\n                    <template v-slot:item.date=\"{ item }\">\n                        {{ d(item.date, \"long\") }}\n                    </template>\n                    <template v-slot:item.actions=\"{ item }\">\n                        <v-btn\n                            v-if=\"auth.canDelete(PermissionTarget.EVENT)\"\n                            density=\"compact\"\n                            variant=\"text\"\n                            @click=\"deleteEvent(item)\"\n                            prepend-icon=\"fas fa-xmark\"\n                            color=\"red\"\n                            >Delete</v-btn\n                        >\n                        <v-btn\n                            v-if=\"auth.canChange(PermissionTarget.EVENT)\"\n                            density=\"compact\"\n                            variant=\"text\"\n                            @click=\"editEvent(item.id)\"\n                            prepend-icon=\"fas fa-pen-to-square\"\n                            >Edit</v-btn\n                        >\n                    </template>\n                </v-data-table-server>\n            </v-row>\n        </v-col>\n    </LayoutBase>\n    <EventDialog ref=\"dialog\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { debounce } from \"lodash-es\";\nimport { type Ref, inject, ref } from \"vue\";\nimport { useI18n } from \"vue-i18n\";\nimport { useToast } from \"vue-toastification\";\nimport type { VDataTableServer } from \"vuetify/components\";\n\nimport type { Event } from \"@/api\";\nimport EventDialog from \"@/components/EventDialog.vue\";\nimport LayoutBase from \"@/components/LayoutBase.vue\";\nimport { useAPI } from \"@/services/api\";\nimport { PermissionTarget, useAuth } from \"@/services/auth\";\nimport { useEvents } from \"@/services/events\";\nimport { type LoadArgs, getLoadArgs } from \"@/services/utils/query_tools\";\nimport { confirmDialogKey } from \"@/symbols\";\nimport type { ConfirmDialogType } from \"@/symbols\";\n\n// Get vuetify data-table headers type, It is not currently exported, so just fetch it by hand :)\ntype ReadonlyHeaders = InstanceType<typeof VDataTableServer>[\"headers\"];\n\nconst { t, d } = useI18n();\n\nconst dialog: Ref<InstanceType<typeof EventDialog> | undefined> = ref(undefined);\nconst confirmDialog: ConfirmDialogType = inject(confirmDialogKey)!;\n\nconst toast = useToast();\nconst eventService = useEvents();\nconst api = useAPI();\nconst auth = useAuth();\nconst loading = ref(false);\nconst pageSizeOptions = [25, 50, 100];\nconst perPage = ref(pageSizeOptions[0]);\nconst totalItems = ref(0);\nconst currentPage = ref(1);\nconst events: Ref<Event[]> = ref([]);\nconst refreshKey = ref(0);\nconst headers: ReadonlyHeaders = [\n    {\n        title: t(\"EventView.headers.id\"),\n        sortable: true,\n        key: \"id\",\n    },\n    {\n        title: t(\"EventView.headers.name\"),\n        sortable: false,\n        key: \"name\",\n    },\n    {\n        title: t(\"EventView.headers.tag\"),\n        sortable: false,\n        key: \"tag\",\n    },\n    {\n        title: t(\"EventView.headers.date\"),\n        sortable: true,\n        key: \"date\",\n    },\n    {\n        title: t(\"EventView.headers.archived\"),\n        sortable: false,\n        key: \"archived\",\n    },\n    {\n        title: t(\"EventView.headers.mainUrl\"),\n        sortable: false,\n        key: \"mainurl\",\n    },\n    {\n        title: t(\"EventView.headers.actions\"),\n        sortable: false,\n        key: \"actions\",\n        align: \"end\",\n    },\n];\n\nasync function load(args: LoadArgs) {\n    loading.value = true;\n    const { offset, limit, sortBy } = getLoadArgs(args);\n    try {\n        const { count, results } = await api.events.eventsList(limit, undefined, offset, sortBy);\n        events.value = results;\n        totalItems.value = count;\n    } catch (e) {\n        toast.error(t(\"EventView.loadFailure\"));\n        console.error(e);\n    } finally {\n        loading.value = false;\n    }\n}\n\nconst debouncedLoad = debounce(load, 250); // Don't murderate the server API\n\nasync function deleteEvent(item: Event): Promise<void> {\n    const text = t(\"EventView.confirmDelete\", item);\n    const ok = await confirmDialog.value!.confirm(text);\n    if (ok) {\n        try {\n            await api.events.eventsDestroy(item.id);\n            toast.success(t(\"EventView.deleteSuccess\"));\n        } catch (e) {\n            toast.error(t(\"EventView.deleteFailure\"));\n            console.error(e);\n        }\n        refreshKey.value += 1;\n        await eventService.refreshEvents();\n    }\n}\n\nasync function editEvent(id: number): Promise<void> {\n    const item = await api.events.eventsRetrieve(id);\n    if (await dialog.value!.modal(item)) {\n        refreshKey.value += 1;\n        await eventService.refreshEvents();\n    }\n}\n\nasync function createEvent() {\n    if (await dialog.value!.modal()) {\n        currentPage.value = 1;\n        refreshKey.value += 1;\n        await eventService.refreshEvents();\n    }\n}\n</script>\n"],"names":["dialog","ref","t","useI18n","api","useAPI","toast","useToast","existingId","archivedLabel","computed","archived","validationSchema","yupObject","yupString","YupDate","yupBoolean","handleSubmit","setTouched","resetForm","setValues","useForm","name","useField","tag","date","mainUrl","submit","values","ok","editItem","createItem","_a","itemId","e","modal","item","__expose","d","confirmDialog","inject","confirmDialogKey","eventService","useEvents","auth","useAuth","loading","pageSizeOptions","perPage","totalItems","currentPage","events","refreshKey","headers","load","args","offset","limit","sortBy","getLoadArgs","count","results","debouncedLoad","debounce","deleteEvent","text","editEvent","id","createEvent"],"mappings":"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"}